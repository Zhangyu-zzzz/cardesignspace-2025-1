# 简化的前端Dockerfile，解决构建卡住问题
FROM node:16-alpine as builder

# 设置Alpine镜像源为国内镜像
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

WORKDIR /app

# 设置npm国内镜像源
RUN npm config set registry https://registry.npmmirror.com

# 复制依赖文件
COPY package*.json ./

# 安装依赖，添加超时配置
RUN npm ci --timeout=600000 --prefer-offline --no-audit

# 复制源代码和环境配置
COPY . .
COPY env.production .env.production

# 构建生产版本
RUN npm run build

# 生产阶段 - 使用更轻量的nginx镜像
FROM nginx:1.21-alpine

# 设置Alpine镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装curl，分步安装避免卡住
RUN apk update
RUN apk add --no-cache curl

# 复制构建文件到nginx
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 创建nginx日志目录
RUN mkdir -p /var/log/nginx

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]





