name: CI/CD Pipeline (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      run: |
        echo "开始检出代码..."
        git clone https://github.com/Zhangyu-zzzz/cardesignspace-2025-1.git
        cd cardesignspace-2025-1
        echo "代码检出完成"
        
    - name: Setup environment
      run: |
        echo "设置部署环境..."
        echo "服务器地址: ${{ secrets.SERVER_HOST }}"
        echo "服务器用户: ${{ secrets.SERVER_USER }}"
        
    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "开始部署到服务器..."
        
        # 设置SSH密钥
        echo "设置SSH密钥..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        
        # 创建简单的SSH配置
        cat > ~/.ssh/config << EOF
        Host $SERVER_HOST
          HostName $SERVER_HOST
          User $SERVER_USER
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ConnectTimeout 60
          ServerAliveInterval 60
          ServerAliveCountMax 3
        EOF
        
        chmod 600 ~/.ssh/config
        
        # 简单的连接测试
        echo "测试SSH连接..."
        ssh $SERVER_USER@$SERVER_HOST "echo 'SSH连接成功'"
        
        # 执行部署命令
        echo "开始执行简单部署命令..."
        ssh $SERVER_USER@$SERVER_HOST "
          cd /opt/auto-gallery
          echo '进入项目目录完成'
          
          echo '备份当前状态...'
          if [ -f frontend/public/index.html ]; then
            cp frontend/public/index.html frontend/public/index.html.backup.\$(date +%Y%m%d_%H%M%S)
            echo '已备份 index.html'
          fi
          
          echo '清理Git状态...'
          rm -f .git/refs/remotes/origin/main.lock || echo '没有找到锁定文件'
          rm -f .git/index.lock || echo '没有找到索引锁定文件'
          
          echo '拉取最新代码...'
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          echo '验证Git状态...'
          git status
          echo '最新提交: '\$(git log --oneline -1)
          
          echo '停止服务...'
          docker-compose down
          
          echo '重新构建前端镜像...'
          docker-compose build --no-cache frontend
          echo '前端镜像构建完成'
          
          echo '重新构建后端镜像...'
          docker-compose build --no-cache backend
          echo '后端镜像构建完成'
          
          echo '启动服务...'
          docker-compose up -d
          
          echo '等待服务启动...'
          sleep 15
          
          echo '检查服务状态...'
          docker-compose ps
          
          echo '测试前端服务...'
          curl -s -o /dev/null -w '前端HTTP状态码: %{http_code}' http://localhost:8080 || echo '前端服务连接失败'
          
          echo '测试后端服务...'
          curl -s -o /dev/null -w '后端HTTP状态码: %{http_code}' http://localhost:3001 || echo '后端服务连接失败'
          
          echo '检查百度统计代码...'
          docker exec auto-gallery-frontend cat /usr/share/nginx/html/index.html | grep -i 'hm.baidu.com' || echo '未找到百度统计代码'
          
          echo '简单部署完成!'
        "
        
        echo "部署步骤完成"
        
    - name: Health check
      run: |
        echo "开始健康检查..."
        sleep 30
        echo "检查前端健康状态..."
        curl -f http://${{ secrets.SERVER_HOST }}:8080/health || echo "前端健康检查失败"
        echo "检查后端健康状态..."
        curl -f http://${{ secrets.SERVER_HOST }}:3001/api/health || echo "后端健康检查失败"
        echo "检查域名访问..."
        curl -s -o /dev/null -w "域名HTTP状态码: %{http_code}\n" https://www.cardesignspace.com || echo "域名访问失败"
        echo "健康检查完成"
