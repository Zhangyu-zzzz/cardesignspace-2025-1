name: CI/CD Pipeline (Ultimate)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # 增加超时时间
    
    steps:
    - name: Checkout code
      run: |
        echo "开始检出代码..."
        git clone https://github.com/Zhangyu-zzzz/cardesignspace-2025-1.git
        cd cardesignspace-2025-1
        echo "代码检出完成"
        
    - name: Setup environment
      run: |
        echo "设置部署环境..."
        echo "服务器地址: ${{ secrets.SERVER_HOST }}"
        echo "服务器用户: ${{ secrets.SERVER_USER }}"
        
    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "开始部署到服务器..."
        
        # 设置SSH密钥
        echo "设置SSH密钥..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        
        # 创建SSH配置文件
        cat > ~/.ssh/config << EOF
        Host $SERVER_HOST
          HostName $SERVER_HOST
          User $SERVER_USER
          IdentityFile ~/.ssh/id_rsa
          ServerAliveInterval 30
          ServerAliveCountMax 20
          ConnectTimeout 30
          TCPKeepAlive yes
          Compression yes
          ControlMaster auto
          ControlPath ~/.ssh/control-%h-%p-%r
          ControlPersist 10m
        EOF
        
        chmod 600 ~/.ssh/config
        
        # 测试SSH连接（带重试）
        echo "测试SSH连接..."
        for i in {1..5}; do
          echo "尝试第 $i 次连接..."
          if ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "echo 'SSH连接成功 - 尝试 $i'"; then
            echo "SSH连接成功！"
            break
          else
            echo "SSH连接失败，等待5秒后重试..."
            sleep 5
            if [ $i -eq 5 ]; then
              echo "SSH连接失败，退出部署"
              exit 1
            fi
          fi
        done
        
        # 连接到服务器并部署
        echo "开始执行终极部署命令..."
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
          set -e  # 遇到错误立即退出
          echo "进入项目目录..."
          cd /opt/auto-gallery
          
          echo "备份当前状态..."
          if [ -f frontend/public/index.html ]; then
            cp frontend/public/index.html frontend/public/index.html.backup.$(date +%Y%m%d_%H%M%S)
            echo "已备份 index.html"
          fi
          
          echo "清理Git状态..."
          # 清理可能的Git锁定文件
          rm -f .git/refs/remotes/origin/main.lock || echo "没有找到锁定文件"
          rm -f .git/index.lock || echo "没有找到索引锁定文件"
          
          echo "重置Git仓库..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          echo "验证Git状态..."
          git status
          echo "最新提交: $(git log --oneline -1)"
          
          echo "检查是否需要重新构建..."
          
          # 检查前端代码是否有变化
          FRONTEND_CHANGED=false
          if [ -d "frontend" ]; then
            # 检查前端源代码、配置文件等关键文件
            if git diff --name-only HEAD~1 | grep -E "^(frontend/src|frontend/public|frontend/package.json|frontend/vue.config.js)" > /dev/null; then
              FRONTEND_CHANGED=true
              echo "检测到前端代码变化，需要重新构建前端"
            fi
          fi
          
          # 检查后端代码是否有变化
          BACKEND_CHANGED=false
          if [ -d "backend" ]; then
            # 检查后端源代码、配置文件等关键文件
            if git diff --name-only HEAD~1 | grep -E "^(backend/src|backend/package.json|backend/app.js)" > /dev/null; then
              BACKEND_CHANGED=true
              echo "检测到后端代码变化，需要重新构建后端"
            fi
          fi
          
          # 如果没有检测到变化，检查Docker镜像是否存在
          if [ "$FRONTEND_CHANGED" = false ] && [ "$BACKEND_CHANGED" = false ]; then
            echo "代码无变化，检查是否需要首次构建..."
            if ! docker images | grep -q "auto-gallery-frontend"; then
              FRONTEND_CHANGED=true
              echo "前端镜像不存在，需要构建"
            fi
            if ! docker images | grep -q "auto-gallery-backend"; then
              BACKEND_CHANGED=true
              echo "后端镜像不存在，需要构建"
            fi
          fi
          
          if [ "$FRONTEND_CHANGED" = true ] || [ "$BACKEND_CHANGED" = true ]; then
            echo "需要重新构建，停止服务..."
            docker-compose down
            
            # 分步构建，避免同时构建导致资源不足
            if [ "$FRONTEND_CHANGED" = true ]; then
              echo "重新构建前端镜像..."
              docker-compose build --no-cache frontend
              echo "前端镜像构建完成"
            else
              echo "前端代码无变化，跳过前端构建"
            fi
            
            if [ "$BACKEND_CHANGED" = true ]; then
              echo "重新构建后端镜像..."
              docker-compose build --no-cache backend
              echo "后端镜像构建完成"
            else
              echo "后端代码无变化，跳过后端构建"
            fi
            
            echo "启动服务..."
            docker-compose up -d
          else
            echo "代码无变化，仅重启服务..."
            docker-compose restart
          fi
          
          echo "等待服务启动..."
          sleep 20
          
          echo "检查服务状态..."
          docker-compose ps
          
          echo "检查服务健康状态..."
          docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
          
          echo "测试前端服务..."
          curl -s -o /dev/null -w "前端HTTP状态码: %{http_code}\n" http://localhost:8080 || echo "前端服务连接失败"
          
          echo "测试后端服务..."
          curl -s -o /dev/null -w "后端HTTP状态码: %{http_code}\n" http://localhost:3001 || echo "后端服务连接失败"
          
          echo "检查构建后的index.html..."
          docker exec auto-gallery-frontend cat /usr/share/nginx/html/index.html | head -5
          
          echo "检查百度统计代码..."
          docker exec auto-gallery-frontend cat /usr/share/nginx/html/index.html | grep -i "hm.baidu.com" || echo "未找到百度统计代码"
          
          echo "终极部署完成!"
        EOF
        
        echo "部署步骤完成"
        
    - name: Health check
      run: |
        echo "开始健康检查..."
        sleep 30
        echo "检查前端健康状态..."
        curl -f http://${{ secrets.SERVER_HOST }}:8080/health || echo "前端健康检查失败"
        echo "检查后端健康状态..."
        curl -f http://${{ secrets.SERVER_HOST }}:3001/api/health || echo "后端健康检查失败"
        echo "检查域名访问..."
        curl -s -o /dev/null -w "域名HTTP状态码: %{http_code}\n" https://www.cardesignspace.com || echo "域名访问失败"
        echo "健康检查完成"
